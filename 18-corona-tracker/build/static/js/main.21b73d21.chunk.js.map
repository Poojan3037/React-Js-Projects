{"version":3,"sources":["InfoBox.js","Table.js","LineGraph.js","Map.js","App.js","index.js"],"names":["InfoBox","props","title","cases","total","caseType","Card","className","CardContent","Typography","color","gutterBottom","Table","countries","map","item","country","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","numeral","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","LineGraph","console","log","useState","setData","buildChartData","jsonData","lastEndPoint","chartArr","key","newArr","x","y","push","fetchData","a","fetch","response","json","chartData","useEffect","dataset","backgroundColor","borderColor","length","datasets","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","Map","casesType","center","zoom","TileLayer","url","attribution","countryInfo","flag","Circle","lat","long","fillColor","fillOpacity","Math","sqrt","Popup","style","backgroundImage","App","setCountries","setCountry","loading","setLoading","setCountryInfo","tableData","setTableData","mapData","setMapData","lng","mapCenter","setMapCenter","mapZoom","setCaseType","sortData","sort","b","getFirstLoad","getAllCountries","name","iso2","onCountryChange","e","code","target","src","alt","FormControl","Select","variant","onChange","onClick","todayCases","todayRecovered","todayDeaths","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.21b73d21.chunk.js","sourcesContent":["import React from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport './InfoBox.css'\r\n\r\nconst InfoBox = (props) => {\r\n\r\n    let { title, cases, total,caseType}=props\r\n\r\n    return (\r\n        <>\r\n            <Card className={caseType===\"cases\" || caseType===\"deaths\"?'card-red':'card-green'} >\r\n                <CardContent>\r\n                    <Typography color=\"textSecondary\" gutterBottom>\r\n                        {title}\r\n                    </Typography>\r\n            \r\n                    <Typography className=\"h2\">\r\n                        {cases}+<span className=\"h2-time\">in 10 minutes</span>\r\n                    </Typography>\r\n        \r\n                    <Typography>\r\n                        {total} total\r\n                    </Typography>\r\n                </CardContent>\r\n            </Card>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default InfoBox;","import React from 'react';\r\nimport './Table.css'\r\n\r\nconst Table = (props) => {\r\n\r\n    let { countries } = props;\r\n\r\n    return (\r\n        <>\r\n            <div className=\"table\">\r\n                {\r\n                    countries.map((item) => {\r\n                        return (\r\n                            <>\r\n                                <tr>\r\n                                    <td><strong>{item.country}</strong></td>\r\n                                    <td><strong>{item.cases}</strong></td>\r\n                                </tr>\r\n                            </>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Table;","import React, { useEffect, useState } from 'react'\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\nimport './LineGraph.css'\r\n\r\n\r\nconst options = {\r\n    legend: {\r\n        display: false,\r\n    },\r\n    elements: {\r\n        point: {\r\n            radius: 0,\r\n        },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n        mode: \"index\",\r\n        intersect: false,\r\n        callbacks: {\r\n            label: function (tooltipItem, data) {\r\n                return numeral(tooltipItem.value).format(\"+0,0\");\r\n            },\r\n        },\r\n    },\r\n    scales: {\r\n        xAxes: [\r\n            {\r\n                type: \"time\",\r\n                time: {\r\n                    format: \"MM/DD/YY\",\r\n                    tooltipFormat: \"ll\",\r\n                },\r\n            },\r\n        ],\r\n        yAxes: [\r\n            {\r\n                gridLines: {\r\n                    display: false,\r\n                },\r\n                ticks: {\r\n                    // Include a dollar sign in the ticks\r\n                    callback: function (value, index, values) {\r\n                        return numeral(value).format(\"0a\");\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n    },\r\n};\r\n\r\nconst LineGraph = (props) => {\r\n\r\n    let {caseType}=props;\r\n    console.log(caseType)\r\n\r\n    let [data, setData] = useState([]);\r\n\r\n    const buildChartData = (jsonData, type) => {\r\n        let chartArr = [];\r\n        let lastEndPoint;\r\n        console.log(\"h\")\r\n\r\n        for (let key in jsonData[type]) {\r\n            if (lastEndPoint) {\r\n                let newArr = {\r\n                    x: key,\r\n                    y: jsonData[type][key] - lastEndPoint\r\n                }\r\n                chartArr.push(newArr);\r\n            }\r\n            lastEndPoint = jsonData[type][key]\r\n        }\r\n\r\n        return chartArr;\r\n    }\r\n\r\n    const fetchData = async () => {\r\n        let response = await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\");\r\n        let jsonData = await response.json();\r\n\r\n        if (jsonData) {\r\n            let chartData = buildChartData(jsonData, caseType)\r\n            setData(chartData);\r\n        }\r\n\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchData();\r\n    }, [])\r\n    useEffect(() => {\r\n        fetchData();\r\n    }, [caseType])\r\n\r\n\r\n\r\n    let dataset={}\r\n    if(caseType==='cases'){\r\n        dataset={\r\n            backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n            borderColor: \"#CC1034\",\r\n            data: data\r\n        }\r\n    }else if(caseType===\"recovered\"){\r\n        dataset={\r\n            backgroundColor:\"#cce6cc\",\r\n            borderColor:\"green\",\r\n            data:data\r\n        }\r\n    }else{\r\n        dataset={\r\n            backgroundColor:\"#ff9999\",\r\n            borderColor:\"#990000\",\r\n            data:data\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"lineGraph\">\r\n                {data.length > 0 && (\r\n                    <Line\r\n                        data={{\r\n                            datasets: [\r\n                                dataset\r\n                            ],\r\n                        }}\r\n                        options={options}\r\n                    />\r\n                )}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LineGraph;\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport { Map as LeafletMap, TileLayer, Circle, Popup } from \"react-leaflet\";\r\nimport \"./Map.css\";\r\n\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    rgb: \"rgb(204, 16, 52)\",\r\n    half_op: \"rgba(204, 16, 52, 0.5)\",\r\n    multiplier: 400,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    rgb: \"rgb(125, 215, 29)\",\r\n    half_op: \"rgba(125, 215, 29, 0.5)\",\r\n    multiplier: 300,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    rgb: \"rgb(251, 68, 67)\",\r\n    half_op: \"rgba(251, 68, 67, 0.5)\",\r\n    multiplier: 1600,\r\n  },\r\n};\r\n\r\n\r\n\r\nconst Map = ({ countries, casesType, center, zoom }) => {\r\n  return (\r\n    <div className=\"map\">\r\n      <LeafletMap className=\"leafletmap\" center={center} zoom={zoom}>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n        {\r\n          countries.map((item) => {\r\n            console.log(item)\r\n            console.log(item.countryInfo.flag)\r\n            return (\r\n              <>\r\n                <Circle\r\n                  center={[item.countryInfo.lat, item.countryInfo.long]}\r\n                  color={casesTypeColors[casesType].hex}\r\n                  fillColor={casesTypeColors[casesType].hex}\r\n                  fillOpacity={0.4}\r\n                  radius={\r\n                    Math.sqrt(item[casesType]) * casesTypeColors[casesType].multiplier\r\n                  }\r\n                >\r\n                  <Popup>\r\n                    <div className=\"popup-container\">\r\n                      <div className=\"popup-flag\" style={{ backgroundImage: `url(${item.countryInfo.flag})` }}>\r\n                      </div>\r\n                      <div className=\"popup-name\">\r\n                      {item.country}\r\n                      </div>\r\n                      <div className=\"popup-cases\">\r\n                        Total Cases : {item.cases}\r\n                      </div>\r\n                      <div className=\"popup-recovered\">\r\n                        Total Recovered : {item.recovered}\r\n                      </div>\r\n                      <div className=\"popup-deaths\">\r\n                        Total Deaths : {item.deaths}\r\n                      </div>\r\n                    </div>\r\n                  </Popup>\r\n                </Circle>\r\n              </>\r\n            )\r\n          })\r\n        }\r\n\r\n      </LeafletMap>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;","import React, { useEffect, useState } from 'react';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport InfoBox from './InfoBox';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Table from './Table';\r\nimport LineGraph from './LineGraph';\r\nimport Map from './Map';\r\nimport \"leaflet/dist/leaflet.css\";\r\n\r\nimport './App.css'\r\n\r\nconst App = () => {\r\n\r\n    let [countries, setCountries] = useState([]);\r\n    let [country, setCountry] = useState(\"worldwide\");\r\n    let [loading, setLoading] = useState(true);\r\n    let [countryInfo, setCountryInfo] = useState([]);\r\n    let [tableData, setTableData] = useState([]);\r\n    let [mapData, setMapData] = useState([]);\r\n    let [mapCenter, setMapCenter] = useState({ lat: 25.0902, lng: -95.7129 });\r\n    let [mapZoom, setMapZoom] = useState(3);\r\n    let [caseType, setCaseType] = useState(\"cases\");\r\n\r\n    const sortData = (country) => {\r\n        country.sort((a, b) => {\r\n            if (a.cases > b.cases) {\r\n                return -1\r\n            }\r\n            else {\r\n                return 1\r\n            }\r\n        })\r\n\r\n        return country;\r\n    }\r\n\r\n    const getFirstLoad = async () => {\r\n        setLoading(true);\r\n        let response = await fetch(`https://disease.sh/v3/covid-19/all`);\r\n        let jsonData = await response.json();\r\n\r\n        if (jsonData) {\r\n            setCountryInfo(jsonData)\r\n        }\r\n    }\r\n\r\n    const getAllCountries = async () => {\r\n        setLoading(true);\r\n        let response = await fetch(`https://disease.sh/v3/covid-19/countries`);\r\n        let jsonData = await response.json();\r\n\r\n        if (jsonData) {\r\n            const newArr = jsonData.map((country) => ({\r\n                name: country.country,\r\n                value: country.countryInfo.iso2,\r\n            }));\r\n            let sort = sortData(jsonData);\r\n            setCountries(newArr);\r\n            setMapData(jsonData);\r\n            setTableData(sort)\r\n            setLoading(false);\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    const onCountryChange = async (e) => {\r\n        let code = e.target.value;\r\n\r\n        let url = code === \"worldwide\" ? \"https://disease.sh/v3/covid-19/all\" : `https://disease.sh/v3/covid-19/countries/${code}`;\r\n\r\n        let response = await fetch(url);\r\n        let jsonData = await response.json();\r\n\r\n        if (jsonData) {\r\n            setCountryInfo(jsonData)\r\n            setCountry(code)\r\n            if (code == \"worldwide\") {\r\n                setMapCenter({ lat: 34.80746, lng: -40.4796 })\r\n            } else {\r\n                setMapCenter({ lat: jsonData.countryInfo.lat, lng: jsonData.countryInfo.long })\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    console.log(countryInfo)\r\n\r\n    useEffect(() => {\r\n        getAllCountries();\r\n        getFirstLoad();\r\n    }, [])\r\n\r\n    if (loading) {\r\n        return (\r\n            <>\r\n            <div className=\"container\">\r\n                <h1>loading...</h1>\r\n            </div>\r\n            </>\r\n        )\r\n    } else {\r\n\r\n        return (\r\n            <>\r\n                <div className=\"app\">\r\n                    <div className=\"app_left\">\r\n                        <div className=\"header\">\r\n                            <div className=\"header-title\">\r\n                                <div className=\"header-img\">\r\n                                    <img src=\"coronavirus.png\" alt=\"\" />\r\n                                </div>\r\n                                <div className=\"header-corona\">\r\n                                    <h1>Corona Tracker</h1>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"header-dropdown\">\r\n                                <FormControl className=\"app__dropdown\">\r\n                                    <Select\r\n                                        variant=\"outlined\"\r\n                                        value={country}\r\n                                        onChange={onCountryChange}\r\n                                    >\r\n                                        <option value=\"worldwide\">Worldwide</option>\r\n                                        {countries.map((country) => (\r\n                                            <option value={country.value}>{country.name}</option>\r\n                                        ))}\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"card\">\r\n                            <div onClick={() => { setCaseType(\"cases\") }}>\r\n                                <InfoBox title=\"Cases\" cases={countryInfo.todayCases} total={countryInfo.cases} caseType={caseType} />\r\n                            </div>\r\n                            <div onClick={() => setCaseType(\"recovered\")} >\r\n                                <InfoBox title=\"Recovered\" cases={countryInfo.todayRecovered} total={countryInfo.recovered} />\r\n                            </div>\r\n                            <div onClick={() => setCaseType(\"deaths\")}>\r\n                                <InfoBox title=\"Deaths\" cases={countryInfo.todayDeaths} total={countryInfo.deaths} caseType={caseType} />\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"map\">\r\n                            <Map center={mapCenter} zoom={mapZoom} countries={mapData} casesType={caseType} />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"app_right\" >\r\n                        <Card >\r\n                            <CardContent>\r\n                                <h3>Live Cases by Country</h3>\r\n                                <Table countries={tableData} />\r\n                                <h3>Worldwide new {caseType}</h3>\r\n                                <LineGraph caseType={caseType} />\r\n                            </CardContent>\r\n                        </Card>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}